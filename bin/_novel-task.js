#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("upath2");
const index_1 = require("../index");
const config_1 = require("../lib/config");
const __1 = require("..");
const FastGlob = require("fast-glob");
const crossSpawn = require("cross-spawn");
const log_1 = require("../lib/log");
(async () => {
    let CWD = process.cwd();
    log_1.default.log(`CWD`, CWD);
    const result = config_1.loadMainConfig(CWD);
    if (!result) {
        throw new Error(`無法找到 config`);
    }
    log_1.default.info(`找到 config 位於 ${result.filepath}`);
    //	console.dir(result, {
    //		depth: 4,
    //	});
    let cache = config_1.loadCacheConfig(CWD);
    let IS_INIT = false;
    log_1.default.dir(cache);
    if (!cache || result.config.debug && result.config.debug.init) {
        cache = {
            config: {
                last: 10,
            },
            filepath: path.resolve(CWD, './.cache', '.cache.json'),
        };
        IS_INIT = true;
        log_1.default.warn(`本次為初始化任務，將分析最近 ${cache.config.last} 次紀錄`);
    }
    else if (result.config.debug && result.config.debug.last) {
        cache.config.last = result.config.debug.last;
        log_1.default.debug('[DEBUG]', `由上次紀錄 ${cache.config.last} 之後 開始檢查`);
    }
    else {
        log_1.default.debug(`由上次紀錄 ${cache.config.last} 之後 開始檢查`);
    }
    if (cache.config.last_push_head) {
        try {
            let cp = crossSpawn.sync('git', [
                'branch',
                '--remotes',
                'origin/master',
                '--contains',
                cache.config.last_push_head,
            ], {
                cwd: result.config.cwd,
            }).stdout.toString().trim();
            if (cp != 'origin/master') {
                log_1.default.warn(`上次推送的分支 ${cache.config.last_push_head} 似乎未被合併`);
                log_1.default.yellow(`本次將重新由上次起始點 ${cache.config.last_from} 開始`);
                cache.config.last = cache.config.last_from;
            }
        }
        catch (e) {
        }
    }
    let data = __1.novelDiffFromLog({
        novelRoot: result.config.cwd,
        baseHash: cache.config.last,
    });
    if (1 && IS_INIT && !result.config.disableInit) {
        log_1.default.warn(`本次為初始化任務，將執行全部任務`);
        //		console.log(result);
        await FastGlob([
            '**/*.md',
            '**/*.txt',
        ], {
            cwd: result.config.cwd,
        })
            .then(ls => {
            return index_1.globToFakeList(ls);
        })
            .then(function (ret) {
            return Object.assign(data, ret);
        });
    }
    if (!result.config.nocache && data.count.novel) {
        cache.config.last = data.range.from;
        //		cache.config.last_from = data.range.from;
        cache.config.done = -1;
        fs.writeJSONSync(cache.filepath, cache.config, {
            spaces: 2,
        });
    }
    if (Object.keys(data.list).length) {
        log_1.default.debug(`在上次的更新 ${data.range.from} 之後 有 ${data.count.novel} 小說 ${data.count.file} 檔案產生變動`);
    }
    else {
        log_1.default.warn(`在上次的更新 ${data.range.from} 之後 沒有新的變化`);
    }
    await __1.runTask(data, result, {
        init: IS_INIT,
    });
    if (!result.config.nocache && data.count.novel) {
        log_1.default.debug(data.range);
        cache.config.last = data.range.to;
        cache.config.last_from = data.range.from;
        cache.config.done = 1;
        log_1.default.dir(cache);
        fs.writeJSONSync(cache.filepath, cache.config, {
            spaces: 2,
        });
    }
})();
//# sourceMappingURL=data:application/json;base64,